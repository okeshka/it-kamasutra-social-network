{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsItem/DialogsItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogsItem","props","name","id","className","s","dialog","to","Message","message","maxLength21","maxLength","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogs","messages","byMessageClick","newMessageBody","isAuth","dialogsElements","map","number","key","messagesElements","values","mapStateToPropsForRedirect","state","auth","compose","connect","dialogsPage","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"qIACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,gBAAgB,iC,sFCYtDC,EATK,SAACC,GAAW,IACrBC,EAAYD,EAAZC,KAAMC,EAAMF,EAANE,GACb,OACI,yBAAKC,UAAaC,IAAEC,QAChB,kBAAC,IAAD,CAASC,GAAE,mBAAgBJ,IAAOD,KCM/BM,EARC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACd,OACI,yBAAKL,UAAWC,IAAEI,SACbA,I,yCC0BPC,EAAcC,YAAU,IAiBxBC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAfL,SAAAZ,GACnB,OACI,0BAAMc,SAAYd,EAAMe,cACpB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAaC,IAAUjB,KAAO,iBAAiBkB,YAAc,qBAChEC,SAAY,CAACC,IAAUZ,MAG/B,6BACI,oFAQDa,EA7CC,SAAC,GAAiE,IAAhEC,EAA+D,EAA/DA,QAASC,EAAsD,EAAtDA,SAA0BC,GAA4B,EAA5CC,eAA4C,EAA5BD,gBAAgBE,EAAY,EAAZA,OAK7DC,EAAkBL,EACjBM,KAAI,SAACC,GAAD,OAAY,kBAAC,EAAD,CAAaC,IAAOD,EAAO5B,GAAID,KAAQ6B,EAAO7B,KAAMC,GAAM4B,EAAO5B,QAElF8B,EAAmBR,EAClBK,KAAK,SAAAC,GAAM,OAAI,kBAAC,EAAD,CAASC,IAAOD,EAAO5B,GAAIM,QAAWsB,EAAOtB,aACjE,OAAKmB,EAED,yBAAKxB,UAAaC,IAAEmB,SAChB,yBAAKpB,UAAaC,IAAE,kBACdwB,GAEN,yBAAKzB,UAAaC,IAAEoB,UAChB,6BACMQ,GAEN,kBAACrB,EAAD,CAAqBG,SAlBX,SAACmB,GAAD,OACtBR,EAAeQ,EAAOP,qBAOF,kBAAC,IAAD,CAAUpB,GAAK,Y,iDCfnC4B,EAA6B,SAAAC,GAC7B,MAAO,CACHR,OAAQQ,EAAMC,KAAKT,S,OCgBZU,sBAAQC,aAhBD,SAAAH,GAClB,MAAO,CACHZ,QAASY,EAAMI,YAAYhB,QAC3BC,SAAUW,EAAMI,YAAYf,aAIX,SAAAgB,GACrB,MAAO,CACHf,eAAgB,SAAAC,GACZc,EAASC,YAAmBf,UDNR,SAAAgB,GAAc,IACpCC,EADmC,uKAGjC,OAAKC,KAAK5C,MAAM2B,OAEZ,kBAACe,EAAcE,KAAK5C,OAFO,kBAAC,IAAD,CAAUM,GAAK,eAHb,GACTuC,IAAMH,WAYtC,OAFqCJ,YAAQJ,EAARI,CAAoCK,KCC9DN,CAAwEf","file":"static/js/4.a247372e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3ISpy\",\"dialogs-items\":\"Dialogs_dialogs-items__1Zl7Y\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst DialogsItem = (props) => {\r\n    const {name, id} = props\r\n    return (\r\n        <div className = {s.dialog}>\r\n            <NavLink to = {`/dialogs/${id}`}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\n\r\n\r\nconst Message = ({message}) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogsItem from './DialogsItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\nimport { required, maxLength } from '../../utils/validators/validators';\r\n\r\nconst Dialogs = ({dialogs, messages, newMessageBody, byMessageClick, isAuth}) => {\r\n\r\n    const addNewMessage = (values) => \r\n    byMessageClick(values.newMessageBody);\r\n\r\n    let dialogsElements = dialogs\r\n        .map((number) => <DialogsItem key = {number.id} name = {number.name} id = {number.id}/>\r\n    );\r\n    let messagesElements = messages\r\n        .map (number => <Message key = {number.id} message = {number.message} />)\r\n    if (!isAuth) return <Redirect to = '/login' />\r\n    return (\r\n        <div className = {s.dialogs}>\r\n            <div className = {s['dialogs-items']}> \r\n                { dialogsElements }  \r\n            </div>\r\n            <div className = {s.messages}>\r\n                <div>\r\n                    { messagesElements }\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength21 = maxLength(21);\r\n\r\nconst addMessageForm = props => {\r\n    return (\r\n        <form onSubmit = {props.handleSubmit}>\r\n            <div>\r\n                <Field component = {Textarea} name = 'newMessageBody' placeholder = \"Enter your message\" \r\n                    validate = {[required, maxLength21]}  \r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Жми меня</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(addMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = state => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = Component => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to = '/login' />\r\n            return (\r\n                <Component {...this.props} />\r\n                \r\n            )\r\n        }\r\n    }\r\n    \r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    \r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n","import Dialogs from \"./Dialogs\"\r\nimport {sendMessageCreator} from '../../redux/dialogs-reducer';\r\nimport {connect} from 'react-redux';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = state => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = dispatch => {\r\n    return {\r\n        byMessageClick: newMessageBody => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);"],"sourceRoot":""}